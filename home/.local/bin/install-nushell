#!/usr/bin/env bash

# This is the bootstrap Unix installer for nushell adapted from `https://get.volta.sh`.
# Its responsibility is to query the system to determine what OS the system
# has, fetch and install the appropriate build of nushell

download_release_from_repo() {
  local version="$1"
  local os_info="$2"
  local tmpdir="$3"

  local filename="nu-$version-$os_info.tar.gz"
  local download_file="$tmpdir/$filename"
  local archive_url="https://github.com/nushell/nushell/releases/download/$version/$filename"

  info "Url" "$archive_url"

  curl --progress-bar --show-error --location --fail "$archive_url" --output "$download_file" --write-out "$download_file"
}

info() {
  local action="$1"
  local details="$2"
  command printf '\033[1;32m%12s\033[0m %s\n' "$action" "$details" 1>&2
}

error() {
  command printf '\033[1;31mError\033[0m: %s\n\n' "$1" 1>&2
}

eprintf() {
  command printf '%s\n' "$1" 1>&2
}

# Get the actual nu version from a binary or symlink
get_nu_version() {
  local nu_path="$1"
  if [[ -x "$nu_path" ]]; then
    "$nu_path" --version 2>/dev/null | sed -E 's/^.*([0-9]+\.[0-9]+\.[0-9]+).*$/\1/'
  else
    echo ""
  fi
}

# Check if it is OK to upgrade to the new version
upgrade_is_ok() {
  local will_install_version="$1"
  local install_dir="$2"
  local is_upgrade_mode="$3"

  # In upgrade mode, we're promoting nu-latest to nu
  if [[ "$is_upgrade_mode" == "true" ]]; then
    local nu_latest="$install_dir/nu-latest"
    if [[ ! -L "$nu_latest" ]]; then
      error "No nu-latest symlink found. Run without --upgrade first to test a new version."
      return 1
    fi
    return 0
  fi

  # Check if version already exists
  local versioned_bin="$install_dir/nu-$will_install_version"
  if [[ -f "$versioned_bin" ]]; then
    eprintf "Version $will_install_version already installed at $versioned_bin"

    # Check if nu-latest already points to this version
    local nu_latest="$install_dir/nu-latest"
    if [[ -L "$nu_latest" ]]; then
      local latest_target="$(readlink "$nu_latest")"
      if [[ "$(basename "$latest_target")" == "nu-$will_install_version" ]]; then
        eprintf "nu-latest already points to version $will_install_version"
      else
        eprintf "Creating nu-latest symlink to version $will_install_version"
        rm -f "$nu_latest"
        ln -s "nu-$will_install_version" "$nu_latest"
      fi
    else
      eprintf "Creating nu-latest symlink to version $will_install_version"
      ln -s "nu-$will_install_version" "$nu_latest"
    fi
    return 1
  fi

  return 0
}

# returns the os name to be used in the packaged release
parse_os_info() {
  local uname_str="$1"
  local arch="$(uname -m)"

  case "$uname_str" in
  Linux)
    if [ "$arch" == "x86_64" ]; then
      echo "x86_64-unknown-linux-gnu.tar.gz"
    elif [ "$arch" == "x86_64" ]; then
      echo "aarch64-unknown-linux-gnu.tar.gz"
    else
      error "Releases this architecture is not currently written or supported"
      return 1
    fi
    ;;
  Darwin)
    if [ "$(uname -m)" == "arm64" ]; then
      echo "aarch64-apple-darwin"
    else
      echo "x86_64-apple-darwin"
    fi
    ;;
  *)
    return 1
    ;;
  esac
  return 0
}

parse_os_pretty() {
  local uname_str="$1"

  case "$uname_str" in
  Linux)
    echo "Linux"
    ;;
  Darwin)
    echo "macOS"
    ;;
  *)
    echo "$uname_str"
    ;;
  esac
}

create_tree() {
  local install_dir="$1"

  info 'Creating' "directory layout"

  # .local/bin

  mkdir -p "$install_dir"
  if [ "$?" != 0 ]; then
    error "Could not create directory layout. Please make sure the target directory is writeable: $install_dir"
    exit 1
  fi
}

install_release() {
  local version="$1"
  local install_dir="$2"
  local is_upgrade_mode="$3"

  info 'Checking' "for existing nu installation"
  if upgrade_is_ok "$version" "$install_dir" "$is_upgrade_mode"; then
    download_archive="$(
      download_release "$version"
      exit "$?"
    )"
    exit_status="$?"
    if [ "$exit_status" != 0 ]; then
      error "Could not download nushell version '$version'."
      return "$exit_status"
    fi

    local extract_dir="$(mktemp -d)"

    extract_to_dir "$download_archive" "$extract_dir"

    install_to_target "$extract_dir" "$install_dir" "$version"
  else
    # existing install, or upgrade problem
    return 1
  fi
}

download_release() {
  local version="$1"

  local uname_str="$(uname -s)"
  local os_info
  os_info="$(parse_os_info "$uname_str")"
  if [ "$?" != 0 ]; then
    error "The current operating system ($uname_str) does not appear to be supported by nushell."
    return 1
  fi
  local pretty_os_name="$(parse_os_pretty "$uname_str")"

  info 'Fetching' "archive for $pretty_os_name, version $version"
  # store the downloaded archive in a temporary directory
  local download_dir="$(mktemp -d)"
  download_release_from_repo "$version" "$os_info" "$download_dir"
}

# extracts the given archive file to a directory
# it also renames the named binary to just `nu`
extract_to_dir() {
  local archive="$1"
  local target_dir="$2"

  local dir_name="$(basename "$archive" .tar.gz)"

  info 'Extracting' "nushell binary"
  # extract the files to the specified directory
  tar -xf "$archive" -C "$target_dir"

  # rename the full name to something shorter
  mv "$target_dir/$dir_name" "$target_dir/nu"
}

# move just the main nu binary to target
# there are some plugins shipped and we don't want these
install_to_target() {
  local extracted_dir="$1"
  local install_dir="$2"
  local version="$3"

  create_tree "$install_dir"

  # Install as versioned binary
  local versioned_bin="$install_dir/nu-$version"
  info 'Installing' "nu version $version to $versioned_bin"
  mv "$extracted_dir/nu/nu" "$versioned_bin"
  chmod +x "$versioned_bin"

  # Create nu-latest symlink
  local nu_latest="$install_dir/nu-latest"
  if [[ -L "$nu_latest" ]]; then
    rm "$nu_latest"
  fi
  ln -s "nu-$version" "$nu_latest"
  info 'Created' "nu-latest symlink pointing to nu-$version"
}

check_architecture() {
  local arch="$1"

  case "$arch" in
  x86_64)
    return 0
    ;;
  arm64)
    if [ "$(uname -s)" = "Darwin" ]; then
      return 0
    fi
    ;;
  esac

  error "Sorry! nu currently only provides pre-built binaries for x86_64 architectures."
  return 1
}

perform_upgrade() {
  local install_dir="$1"

  local nu_latest="$install_dir/nu-latest"
  if [[ ! -L "$nu_latest" ]]; then
    error "No nu-latest symlink found. Run without --upgrade first to test a new version."
    return 1
  fi

  # Get the version that nu-latest points to
  local latest_target="$(readlink "$nu_latest")"
  local latest_version="$(echo "$latest_target" | sed 's/nu-//')"

  info 'Upgrading' "nu to version $latest_version"

  # Remove old nu symlink if it exists
  local nu_main="$install_dir/nu"
  if [[ -L "$nu_main" ]]; then
    local old_target="$(readlink "$nu_main")"
    info 'Removing' "old nu symlink (was pointing to $old_target)"
    rm "$nu_main"
  elif [[ -f "$nu_main" ]]; then
    # Handle case where nu is still a regular file (shouldn't happen after migration)
    info 'Backing up' "old nu binary"
    local old_version="$(get_nu_version "$nu_main")"
    if [[ -n "$old_version" ]]; then
      mv "$nu_main" "$install_dir/nu-$old_version.backup"
    else
      mv "$nu_main" "$install_dir/nu.backup"
    fi
  fi

  # Create new nu symlink pointing to what nu-latest points to
  ln -s "$latest_target" "$nu_main"
  info 'Created' "nu symlink pointing to $latest_target"

  # Remove nu-latest symlink
  rm "$nu_latest"
  info 'Removed' "nu-latest symlink"

  # Test the new nu
  local version="$(get_nu_version "$nu_main")"
  info 'Upgraded' "nu to version $version"

  return 0
}

perform_rollback() {
  local install_dir="$1"
  local target_version="$2"

  # If no version specified, show available versions
  if [[ -z "$target_version" ]]; then
    info 'Available' "nushell versions:"
    for nu_file in "$install_dir"/nu-[0-9]*; do
      if [[ -f "$nu_file" ]]; then
        local file_name="$(basename "$nu_file")"
        local version="${file_name#nu-}"
        # Check if this is the current version
        if [[ -L "$install_dir/nu" ]]; then
          local current_target="$(readlink "$install_dir/nu")"
          if [[ "$(basename "$current_target")" == "$file_name" ]]; then
            echo "  * $version (current)"
          else
            echo "    $version"
          fi
        else
          echo "    $version"
        fi
      fi
    done
    echo ""
    echo "Usage: $0 --rollback <version>"
    echo "Example: $0 --rollback 0.106.0"
    return 1
  fi

  # Check if the target version exists
  local versioned_bin="$install_dir/nu-$target_version"
  if [[ ! -f "$versioned_bin" ]]; then
    error "Version $target_version not found at $versioned_bin"
    echo "Run without arguments to see available versions"
    return 1
  fi

  # Get current version if nu symlink exists
  local nu_main="$install_dir/nu"
  if [[ -L "$nu_main" ]]; then
    local current_target="$(readlink "$nu_main")"
    local current_version="$(echo "$current_target" | sed 's/nu-//')"
    info 'Current' "nu version: $current_version"
  fi

  # Remove nu-latest if it exists
  local nu_latest="$install_dir/nu-latest"
  if [[ -L "$nu_latest" ]]; then
    info 'Removing' "nu-latest symlink"
    rm "$nu_latest"
  fi

  # Update nu symlink to point to target version
  info 'Rolling back' "to nu version $target_version"
  if [[ -L "$nu_main" ]]; then
    rm "$nu_main"
  elif [[ -f "$nu_main" ]]; then
    # Handle case where nu is still a regular file
    info 'Backing up' "old nu binary"
    local old_version="$(get_nu_version "$nu_main")"
    if [[ -n "$old_version" ]]; then
      mv "$nu_main" "$install_dir/nu-$old_version.backup"
    else
      mv "$nu_main" "$install_dir/nu.backup"
    fi
  fi

  ln -s "nu-$target_version" "$nu_main"
  info 'Created' "nu symlink pointing to nu-$target_version"

  # Test the rolled back version
  local version="$(get_nu_version "$nu_main")"
  info 'Rolled back' "to nu version $version"

  return 0
}

main() {
  local install_dir="$HOME/.local/bin"
  local mode="install"
  local rollback_version=""

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --upgrade)
        mode="upgrade"
        shift
        ;;
      --rollback)
        mode="rollback"
        shift
        if [[ $# -gt 0 && ! "$1" =~ ^-- ]]; then
          rollback_version="$1"
          shift
        fi
        ;;
      --help|-h)
        echo "Usage: $0 [--upgrade | --rollback [version]]"
        echo ""
        echo "Without flags: Downloads latest nushell to nu-<version> and creates nu-latest symlink"
        echo "--upgrade: Promotes nu-latest to nu (removes nu-latest, makes nu point to that version)"
        echo "--rollback [version]: Switch nu symlink to specified version (lists versions if none specified)"
        echo ""
        echo "Examples:"
        echo "  $0                   # Install latest version as nu-latest for testing"
        echo "  $0 --upgrade         # Promote nu-latest to become the main nu"
        echo "  $0 --rollback        # List available versions"
        echo "  $0 --rollback 0.106.0  # Switch to version 0.106.0"
        exit 0
        ;;
      *)
        error "Unknown argument: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
    esac
  done

  case "$mode" in
    upgrade)
      perform_upgrade "$install_dir"
      ;;
    rollback)
      perform_rollback "$install_dir" "$rollback_version"
      ;;
    install)
      check_architecture "$(uname -m)" || exit 1

      local latest_version="$(curl --silent https://api.github.com/repos/nushell/nushell/releases/latest | awk -F\" '/tag_name/{print $(NF-1)}')"
      info 'Installing' "latest version of nu ($latest_version)"
      install_release "$latest_version" "$install_dir" false

      if [ "$?" == 0 ]; then
        info 'Finished' "installation. nu-$latest_version available at $install_dir/nu-$latest_version"
        info 'Testing' "nu-latest symlink points to nu-$latest_version"
        local nu_latest="$install_dir/nu-latest"
        local version="$(get_nu_version "$nu_latest")"
        info "Test" "version: $version"
        echo ""
        info 'Note' "Test the new version with: ~/.local/bin/nu-latest"
        info 'Note' "When ready, run: $0 --upgrade"
      fi
      ;;
  esac
}

main "$@"
