#!/usr/bin/env bash

# record-and-transcribe - Record audio and transcribe using whisper
# Usage: record-and-transcribe
# Press Ctrl+C to stop recording

set -e

# Configuration
WHISPER_MODEL="$HOME/dev/models/ggml-medium.bin"
TEMP_DIR="/tmp"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
TEMP_AUDIO="$TEMP_DIR/recording_${TIMESTAMP}.wav"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Cleanup function
cleanup() {
    if [ -f "$TEMP_AUDIO" ]; then
        rm -f "$TEMP_AUDIO"
    fi
}

# Set trap for cleanup on exit
trap cleanup EXIT

# Check dependencies
check_dependencies() {
    local missing_deps=()

    if ! command -v sox &> /dev/null; then
        missing_deps+=("sox")
    fi

    if ! command -v whisper-cli &> /dev/null; then
        missing_deps+=("whisper-cli")
    fi

    if [ ! -f "$WHISPER_MODEL" ]; then
        missing_deps+=("whisper model at $WHISPER_MODEL")
    fi

    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo -e "${RED}Error: Missing dependencies:${NC}"
        printf '%s\n' "${missing_deps[@]}"
        echo -e "${YELLOW}Install sox with: brew install sox${NC}"
        echo -e "${YELLOW}Install whisper-cli with: brew install whisper-cpp${NC}"
        echo -e "${YELLOW}Download model: Run your nushell boot script or manually download to ~/dev/models/${NC}"
        exit 1
    fi
}

# Main recording function
record_audio() {
    echo -e "${GREEN}🎤 Recording... Press Ctrl+C to stop${NC}"

    # Use sox to record audio
    # -d: default audio device
    # -r 16000: sample rate 16kHz (good for speech)
    # -c 1: mono channel
    # -b 16: 16-bit depth
    sox -d -r 16000 -c 1 -b 16 "$TEMP_AUDIO" 2>/dev/null || {
        # Catch the interrupt gracefully
        if [ $? -eq 130 ] || [ $? -eq 2 ]; then
            echo -e "\n${GREEN}✓ Recording stopped${NC}"
            return 0
        else
            echo -e "${RED}Error during recording${NC}"
            return 1
        fi
    }
}

# Transcribe the audio
transcribe_audio() {
    if [ ! -f "$TEMP_AUDIO" ]; then
        echo -e "${RED}No audio file found to transcribe${NC}"
        return 1
    fi

    # Check file size
    local file_size=$(stat -f%z "$TEMP_AUDIO" 2>/dev/null || stat -c%s "$TEMP_AUDIO" 2>/dev/null)

    if [ "$file_size" -lt 1000 ]; then
        echo -e "${YELLOW}Recording too short or empty${NC}"
        return 1
    fi

    echo -e "${YELLOW}📝 Transcribing...${NC}"

    # Run whisper with minimal output
    whisper-cli -m "$WHISPER_MODEL" -nt -np "$TEMP_AUDIO" 2>/dev/null
}

# Main execution
main() {
    check_dependencies

    # Trap Ctrl+C during recording
    trap 'echo -e "\n${GREEN}✓ Recording stopped${NC}"; transcribe_audio; exit 0' INT

    record_audio

    # Reset trap for normal cleanup
    trap cleanup EXIT

    transcribe_audio
}

# Run main function
main