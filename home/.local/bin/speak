#!/usr/bin/env bash
# :module: Text-to-speech conversion utility

set -euo pipefail

# Default delay in seconds
DELAY=1

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --delay|-d)
            DELAY="$2"
            shift 2
            ;;
        --help|-h)
            echo "Usage: speak [options] [audio_file_path]"
            echo "       echo '/path/to/audio.wav' | speak [options]"
            echo "       echo 'text' | tts | speak [options]"
            echo ""
            echo "Plays audio files with media pause/resume functionality."
            echo ""
            echo "Options:"
            echo "  --delay, -d SECONDS  Delay before and after playback (default: 1)"
            echo "  --help, -h          Show this help"
            echo ""
            echo "Examples:"
            echo "  echo 'hello world' | tts | speak"
            echo "  echo 'hello world' | tts | speak --delay 2"
            echo "  speak /path/to/audio.wav"
            echo "  speak --delay 0.5 /path/to/audio.wav"
            exit 0
            ;;
        -*)
            echo "Unknown option: $1. Use --help for usage." >&2
            exit 1
            ;;
        *)
            # First non-option argument is the audio file path
            AUDIO_FILE="$1"
            shift
            ;;
    esac
done

# Get audio file path from argument or stdin
if [[ -z "${AUDIO_FILE:-}" ]]; then
    if [[ -t 0 ]]; then
        echo "Error: No audio file path provided. Pipe path or provide as argument." >&2
        exit 1
    fi
    AUDIO_FILE=$(cat)
    AUDIO_FILE=$(echo "$AUDIO_FILE" | tr -d '\n\r' | xargs)  # Clean whitespace
fi

if [[ -z "$AUDIO_FILE" ]]; then
    echo "Error: No audio file path provided." >&2
    exit 1
fi

if [[ ! -f "$AUDIO_FILE" ]]; then
    echo "Error: Audio file not found: $AUDIO_FILE" >&2
    exit 1
fi

# Media control functions
check_spotify_playing() {
    local state=$(osascript -e 'tell application "Spotify" to player state as string' 2>/dev/null || echo "stopped")
    [[ "$state" == "playing" ]]
}

pause_media() {
    osascript -e 'tell application "Spotify" to pause' 2>/dev/null || true
}

resume_media() {
    osascript -e 'tell application "Spotify" to play' 2>/dev/null || true
}

# Check if Spotify is currently playing
WAS_PLAYING=false
if check_spotify_playing; then
    WAS_PLAYING=true
    pause_media
    sleep "$DELAY"
fi

# Play the audio file
afplay "$AUDIO_FILE" 2>/dev/null

# Resume music only if it was playing before
if [[ "$WAS_PLAYING" == "true" ]]; then
    sleep "$DELAY"
    resume_media
fi

# Pass the audio file path to stdout for further pipeline processing (e.g., cleanup)
echo "$AUDIO_FILE"