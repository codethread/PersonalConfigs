#!/usr/bin/env bash

# This is the bootstrap Unix installer for nushell adapted from `https://get.volta.sh`.
# Its responsibility is to query the system to determine what OS the system
# has, fetch and install the appropriate build of nushell

download_release_from_repo() {
	local version="$1"
	local os_info="$2"
	local tmpdir="$3"

	local filename="nu-$version-$os_info.tar.gz"
	local download_file="$tmpdir/$filename"
	local archive_url="https://github.com/nushell/nushell/releases/download/$version/$filename"

	info "Url" "$archive_url"

	curl --progress-bar --show-error --location --fail "$archive_url" --output "$download_file" --write-out "$download_file"
}

info() {
	local action="$1"
	local details="$2"
	command printf '\033[1;32m%12s\033[0m %s\n' "$action" "$details" 1>&2
}

error() {
	command printf '\033[1;31mError\033[0m: %s\n\n' "$1" 1>&2
}

eprintf() {
	command printf '%s\n' "$1" 1>&2
}

# Check if it is OK to upgrade to the new version
upgrade_is_ok() {
	local will_install_version="$1"
	local install_dir="$2"

	local nu_bin="$install_dir/nu"

	if [[ -n "$install_dir" && -x "$nu_bin" ]]; then
		local prev_version="$( ($nu_bin --version 2>/dev/null || echo 0.1) | sed -E 's/^.*([0-9]+\.[0-9]+\.[0-9]+).*$/\1/')"
		# if installing the same version, this is a no-op
		if [ "$prev_version" == "$will_install_version" ]; then
			eprintf "Version $will_install_version already installed"
			return 1
		fi
	fi
	return 0
}

# returns the os name to be used in the packaged release
parse_os_info() {
	local uname_str="$1"
	local arch="$(uname -m)"

	case "$uname_str" in
	Linux)
		if [ "$arch" == "x86_64" ]; then
			echo "x86_64-unknown-linux-gnu.tar.gz"
		elif [ "$arch" == "x86_64" ]; then
			echo "aarch64-unknown-linux-gnu.tar.gz"
		else
			error "Releases this architecture is not currently written or supported"
			return 1
		fi
		;;
	Darwin)
		if [ "$(uname -m)" == "arm64" ]; then
			echo "aarch64-apple-darwin"
		else
			echo "x86_64-apple-darwin"
		fi
		;;
	*)
		return 1
		;;
	esac
	return 0
}

parse_os_pretty() {
	local uname_str="$1"

	case "$uname_str" in
	Linux)
		echo "Linux"
		;;
	Darwin)
		echo "macOS"
		;;
	*)
		echo "$uname_str"
		;;
	esac
}

create_tree() {
	local install_dir="$1"

	info 'Creating' "directory layout"

	# .local/bin

	mkdir -p "$install_dir"
	if [ "$?" != 0 ]; then
		error "Could not create directory layout. Please make sure the target directory is writeable: $install_dir"
		exit 1
	fi
}

install_release() {
	local version="$1"
	local install_dir="$2"

	info 'Checking' "for existing nu installation"
	if upgrade_is_ok "$version" "$install_dir"; then
		download_archive="$(
			download_release "$version"
			exit "$?"
		)"
		exit_status="$?"
		if [ "$exit_status" != 0 ]; then
			error "Could not download nushell version '$version'."
			return "$exit_status"
		fi

		local extract_dir="$(mktemp -d)"

		extract_to_dir "$download_archive" "$extract_dir"

		install_to_target "$extract_dir" "$install_dir"
	else
		# existing install, or upgrade problem
		return 1
	fi
}

download_release() {
	local version="$1"

	local uname_str="$(uname -s)"
	local os_info
	os_info="$(parse_os_info "$uname_str")"
	if [ "$?" != 0 ]; then
		error "The current operating system ($uname_str) does not appear to be supported by nushell."
		return 1
	fi
	local pretty_os_name="$(parse_os_pretty "$uname_str")"

	info 'Fetching' "archive for $pretty_os_name, version $version"
	# store the downloaded archive in a temporary directory
	local download_dir="$(mktemp -d)"
	download_release_from_repo "$version" "$os_info" "$download_dir"
}

# extracts the given archive file to a directory
# it also renames the named binary to just `nu`
extract_to_dir() {
	local archive="$1"
	local target_dir="$2"

	local dir_name="$(basename "$archive" .tar.gz)"

	info 'Extracting' "nushell binary"
	# extract the files to the specified directory
	tar -xf "$archive" -C "$target_dir"

	# rename the full name to something shorter
	mv "$target_dir/$dir_name" "$target_dir/nu"
}

# move just the main nu binary to target
# there are some plugins shipped and we don't want these
install_to_target() {
	local extracted_dir="$1"
	local install_dir="$2"

	local nu_bin="$install_dir/nu/nu"

	create_tree "$install_dir"

	if [[ -x "$nu_bin" ]]; then
		info 'Deleting old' "$nu_bin"
		rm "$nu_bin"
	fi

	mv "$extracted_dir/nu/nu" "$install_dir/nu"
}

check_architecture() {
	local arch="$1"

	case "$arch" in
	x86_64)
		return 0
		;;
	arm64)
		if [ "$(uname -s)" = "Darwin" ]; then
			return 0
		fi
		;;
	esac

	error "Sorry! nu currently only provides pre-built binaries for x86_64 architectures."
	return 1
}

main() {
	local install_dir="$1"

	check_architecture "$(uname -m)" || exit 1

	local latest_version="$(curl --silent https://api.github.com/repos/nushell/nushell/releases/latest | awk -F\" '/tag_name/{print $(NF-1)}')"
	info 'Installing' "latest version of nu ($latest_version)"
	install_release "$latest_version" "$install_dir"

	if [ "$?" == 0 ]; then
		info 'Finished' "installation. nu available at $install_dir/nu."
		local nu_bin="$install_dir/nu"
		local version="$($nu_bin --version)"
		info "Test" "version: $version"
	fi
}

main "$HOME/.local/bin"
