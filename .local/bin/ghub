#!/usr/bin/env node

async function main() {
  const [remoteStr, branch] = await Promise.all([
    shell("git remote -v").then(returnOrErr),
    shell("git rev-parse --abbrev-ref HEAD").then(returnOrErr),
  ]);

  const remote = remoteStr.split("\n")[0].split("\t")[1].split(" ")[0];
  const { domain, repo } = /^git@(?<domain>.*):(?<repo>.*).git$/.exec(
    remote
  ).groups;

  if (domain === "github.com") {
    await shell(`open https://${domain}/${repo}`);
  } else if (domain.startsWith("git.")) {
    // gitlab
    await shell(`open https://${domain}/${repo}/-/tree/${branch}`);
  } else {
    console.log(`remote not supported: ${remote} (expected github or gitlab)`);
  }
}

function returnOrErr({ stderr, stdout }) {
  if (stderr) throw stderr;
  return stdout;
}

main().catch(console.error);

/**
 * @param {string} cmd
 *
 * @returns {Promise<{ stdout: string; stderr: string }>}
 */
async function shell(cmd) {
  const { spawn } = require("child_process");
  return new Promise((resolve, reject) => {
    const [exe, ...args] = cmd.split(" ");
    const spawned = spawn(exe, args, { shell: true });

    let stdout = "";
    let stderr = "";

    spawned.stdout.on("data", (data) => {
      const str = data.toString();
      stdout += str;
    });

    spawned.stderr.on("data", (data) => {
      const str = data.toString();
      stderr += str;
    });

    spawned.on("close", (code) => {
      if (code === 0) {
        resolve({ stdout: stdout.trim(), stderr });
      } else {
        reject(
          new Error(
            `spawned process ${cmd} exited with code ${code}, stderr ${stderr}`
          )
        );
      }
    });

    spawned.on("error", (e) => {
      reject(new Error(e.message));
    });
  });
}
