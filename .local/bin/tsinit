#!/bin/bash



mkdir "$1"
cd "$1" || exit

mkdir "src"

git init

###############################################
# CORE SETUP
###############################################

# editor config for indentation
echo '# http://editorconfig.org
root = true

[*]
indent_style = space
indent_size = 2
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true' > .editorconfig

# gitignore
echo "node_modules
build
dist" > .gitignore

# editor config for indentation
echo "12.4.0" > .node-version

echo "{
  \"name\": \"$1\",
  \"version\": \"1.0.0\",
  \"description\": \"some name\",
  \"main\": \"dist/app.js\",
  \"scripts\": {
    \"dev\": \"concurrently -k -c cyan.bold,green.bold -p [{name}] -n TypeScript,Node npm:watch-ts npm:watch-node \",
    \"predev\": \"tsc\",
    \"lint\": \"eslint --ext .js,ts --config ./.eslintrc.js ./src\",
    \"nuke\": \"git clean -dfX\",
    \"start\": \"node src/app.js\",
    \"test\": \"jest --watch\",
    \"watch-node\": \"nodemon --watch dist dist/app.js\",
    \"watch-ts\": \"tsc -w --preserveWatchOutput\"
  },
  \"author\": \"AHDesigns\",
  \"license\": \"MIT\"
}" > package.json


echo '{
  "bracketSpacing": true,
  "printWidth": 100,
  "proseWrap": "always",
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "all",
  "useTabs": false
}' > .prettierrc

echo "module.exports = {
  parser:  '@typescript-eslint/parser',
  parserOptions:  {
    project: './tsconfig.json',
    warnOnUnsupportedTypeScriptVersion: false
  },
  extends: [
    'airbnb-base',
    'plugin:@typescript-eslint/recommended',
    'prettier/@typescript-eslint',
    'plugin:prettier/recommended'
  ],
  rules: {
    'no-var': 'off',
    'vars-on-top': 'off',
    'func-names': 'off',
    'prettier/prettier': 'error',
    '@typescript-eslint/no-use-before-define': 0,
    '@typescript-eslint/explicit-function-return-type': 0
  },
  plugins: [
    'prettier',
    '@typescript-eslint'
  ],
  env: {
    node: true,
    jest: true
  },
  settings: {
    'import/resolver': {
      node: {
        extensions: ['.js', '.ts']
      }
    }
  },
}" > .eslintrc.js

# file with some linting errors
echo "export var a: string = 3" > src/app.ts

# tsconfig
echo '{
  "compilerOptions": {
    "outDir": "./dist/",
    "strict": true,
    "sourceMap": true,
    "target": "esnext",
    "module": "commonjs",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "noEmitOnError": false
  },
  "include": [
    "src"
  ],
  "exclude": [
    "node_modules",
    "test/"
  ]
}' > tsconfig.json

# create babel file
# this only exists so jest can parse the ts files
echo "module.exports = {
  presets: [
    ['@babel/preset-env', {targets: {node: 'current'}}],
    '@babel/preset-typescript',
  ],
};" > .babelrc.js

echo "module.exports = {
  verbose: true,
  testMatch: ['**/*{test,spec}.js'],
  testPathIgnorePatterns: ['/node_modules/', '/dist/', '/build/']
};" > jest.config.js

echo "import { a } from './app';
it('runs test', () => {
  expect(a).toBe(3);
});" > src/app.spec.js



dev_deps=(
    "@babel/core"
    "@babel/preset-env"
    "@babel/preset-typescript"
    "@typescript-eslint/eslint-plugin"
    "@typescript-eslint/parser"
    "babel-jest"
    "concurrently"
    "eslint@5.9.0"
    "eslint-config-prettier"
    "eslint-plugin-prettier"
    "jest"
    "nodemon"
    "prettier"
)

deps=(
    "typescript"
    "@types/node"
)


for dep in "${dev_deps[@]}"
do
    yarn add -D "$dep"
done

for dep in "${deps[@]}"
do
    yarn add "$dep"
done

(
  export PKG=eslint-config-airbnb-base;
  npm info "$PKG@latest" peerDependencies --json | command sed 's/[\{\},]//g ; s/: /@/g' | xargs yarn add -D "$PKG@latest"
)
