# vim:foldmethod=marker:foldlevel=0

#: ENVS {{{

%hidden IS_HOME="#{==:#{user},codethread}"
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'

#: }}}
#: Global {{{

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

set -g aggressive-resize on  # max view size when multple connections to same session
set -g automatic-rename on   # rename window to reflect current program
set -g base-index 1          # start windows numbering at 1
set -g detach-on-destroy off # don't kill session when last window is closed
set -g history-limit 5000    # boost history
set -g main-pane-width 60%   # good for default main layout (bound to C-=)
set -g mouse on
set -g pane-base-index 1     # make pane numbering consistent with windows
set -g prefix C-a
set -g remain-on-exit off
set -g renumber-windows on   # renumber windows when a window is closed
set -g set-titles on         # set terminal title
set -g visual-activity off
set -g visual-bell off
set -g visual-silence on
set -s escape-time 10

# this is cool but likely annoying
# set-hook -g after-split-window "select-layout main-vertical"

#: }}}
#: BINDINGS {{{

unbind C-b
bind-key C-a send-prefix

bind r command-prompt -p "Rename Session:" "rename-session '%%'"
bind-key C-M run-shell 'nu -c "use ct/tmux; tmux notes"'

bind-key ? run-shell -b "tmuxKeys"

# set -g @menus_trigger 'x'
# set -g @menus_location_x 'C'
# set -g @menus_location_y 'C'
# set -g @plugin 'jaclu/tmux-menus' -- this is nice, but don't have much need for now

# TMUX_FZF_SESSION_FORMAT
# TMUX_FZF_WINDOW_FORMAT
# TMUX_FZF_LAUNCH_KEY="C-f"
TMUX_FZF_LAUNCH_KEY="\\;"
TMUX_FZF_PANE_FORMAT="#{window_index}.#{pane_index} #{?window_active,+,}#{window_name} - #{pane_current_command} #{pane_current_path}"
set -g @plugin 'sainnhe/tmux-fzf'

#: }}}
#: VIM {{{

set -g mode-keys vi
bind-key -T copy-mode-vi 'v' send -X begin-selection
# bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel
bind-key -T copy-mode-vi 'y' send -X copy-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection

# move up/down through prompts, requires shell integration
bind-key o {
	copy-mode -H
	send-keys -X previous-prompt
}
bind-key -T copy-mode-vi -r o {
	send-keys -X previous-prompt
}
bind-key i {
	copy-mode -H
	send-keys -X next-prompt
}
bind-key -T copy-mode-vi -r i {
	send-keys -X next-prompt
}

#: }}}
#: Session {{{

# change 'project'
bind-key p run-shell 'nu -c "use ct/tmux; tmux switch"'
bind-key f run-shell 'nu -c "use ct/tmux; tmux sessionizer"'

bind-key 0 run-shell 'nu -c "use ct/tmux; tmux sessionizer 0"'
bind-key 1 run-shell 'nu -c "use ct/tmux; tmux sessionizer 1"'
bind-key 2 run-shell 'nu -c "use ct/tmux; tmux sessionizer 2"'
bind-key 3 run-shell 'nu -c "use ct/tmux; tmux sessionizer 3"'
bind-key 4 run-shell 'nu -c "use ct/tmux; tmux sessionizer 4"'
bind-key 5 run-shell 'nu -c "use ct/tmux; tmux sessionizer 5"'
bind-key 6 run-shell 'nu -c "use ct/tmux; tmux sessionizer 6"'
bind-key 7 run-shell 'nu -c "use ct/tmux; tmux sessionizer 7"'
bind-key 8 run-shell 'nu -c "use ct/tmux; tmux sessionizer 8"'
bind-key 9 run-shell 'nu -c "use ct/tmux; tmux sessionizer 9"'

# create session
bind N command-prompt -p "New Session:" "new-session -s '%%' -n main"

bind -r Tab switch-client -l  # move to last session

bind-key w run-shell 'nu -l -c "work-start-work"'
bind-key W run-shell 'nu -l -c "work-start-native"'

#: }}}
#: Window {{{

bind n new-window -c "#{pane_current_path}"

# 'list' windows
bind "l" run-shell -b "~/.config/tmux/plugins/tmux-fzf/scripts/window.sh switch"

# override terminal to send these, they could actually be anything really
bind -n C-M-z previous-window # select previous window
bind -n C-M-x next-window     # select previous window
bind -n C-M-Left swap-window -t -1\; select-window -t -1
bind -n C-M-Right swap-window -t +1\; select-window -t +1
bind -r BTab last-window       # move to last active window
bind BSpace kill-window

bind o kill-window -a # kill all other windows, similar to vim behaviour

#: }}}
#: Layout {{{

bind = select-layout main-vertical # reset layout to my prefered |-
unbind m
bind-key "m" run-shell -b "${DOTFILES}/.local/bin/tmux-layout"

unbind !
# bind ! select-layout c8ed,429x57,0,0{95x57,0,0[95x28,0,0,2,95x28,0,29,32],333x57,96,0,1} # layout -|
# bind-key m select-layout 4431,429x57,0,0{108x57,0,0[108x28,0,0,33,108x28,0,29,36],320x57,109,0,1}

#: }}}
#: Pane {{{

# toggle zoom if possible or split pane
bind Space if -F "#{==:#{window_panes},1}" {
	split-window -h -c "#{pane_current_path}"
	select-layout main-vertical
} {
	resize-pane -Z # zoom pane
}

# pane movement
set -g @plugin 'christoomey/vim-tmux-navigator' # move between vim/tmux smoothly
# bind -r h select-pane -L
# bind -r j select-pane -D
# bind -r k select-pane -U
# bind -r l select-pane -R

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# split panes using | and -
unbind '"'
unbind %
bind -r - split-window -c "#{pane_current_path}"
bind -r | split-window -h -c "#{pane_current_path}"
# bind -r s split-window -c "#{pane_current_path}"
# bind -r v split-window -h -c "#{pane_current_path}"

# 'join' another pane, swapping it for another
bind-key j run-shell -b "~/.config/tmux/plugins/tmux-fzf/scripts/pane.sh swap"
# bind-key u command-prompt -p "join pane from:"  "swap-pane -t '%%'"

# dismiss current pane
bind-key b break-pane -d

# set -g @fuzzback-popup 1
# set -g @plugin 'roosta/tmux-fuzzback' # prefix + ? to fzf history

# set -g @jump-key 's'
# set -g @plugin 'schasse/tmux-jump'

bind-key S command-prompt -p 'save history to filename:' -I '~/tmux.history' 'capture-pane -S -; save-buffer %1 ; delete-buffer'
bind-key O run-shell -b "tmuxBuffer"

#: }}}
#: UI {{{

# TODO: one day sort this out
# set -g default-terminal "xterm-256color-italic"
set -g default-terminal "xterm-kitty"
# set -g default-terminal "screen-256color"
# set -sa terminal-features ',screen-256color:RGB'

set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# The modes
set -g clock-mode-colour colour135
set -g mode-style fg=cyan,bg=black,bold

# The panes
set -g pane-border-style bg="default",fg="#686868"
set -g pane-active-border-style bg="default",fg="blue"

#: }}}
#: STATUS LINE {{{

set -g status-interval 2 # frequency in seconds of refresh
set -g status-justify left
set -g status-position top
set -g status-style bg="default",fg="white"
set -g status-right-length 100
set -g status-left-length 100

set -g status-left '#[fg=magenta,bg=default,bold]#{?client_prefix,#[fg=violet],}   #S#[fg=normal,bg=default]  '

%if $IS_HOME
set -g @cpu_low_fg_color "#[fg=#686868]"
set -g @cpu_medium_fg_color "#[fg=yellow]"
set -g @cpu_high_fg_color "#[fg=red]"
set -g @sysstat_cpu_view_tmpl '#[fg=#{cpu.color}]#{cpu.pused}#[fg=default]'
set -g @sysstat_mem_view_tmpl '#[fg=#{mem.color}]#{mem.pused}#[fg=default]'
set -g @sysstat_swap_view_tmpl '#[fg=#{swap.color}]#{swap.pused}#[fg=default]'
set -g status-right 'c:#{sysstat_cpu} m:#{sysstat_mem} s:#{sysstat_swap} '
set -g @plugin 'samoshkin/tmux-plugin-sysstat'
%else
set -g status-right ""
%endif

# window status
set -g window-status-current-format "#[fg=magenta, bold] #W#{?window_zoomed_flag,#[bold]+,}"
set -g window-status-format "#[fg=normal] #W#{?window_zoomed_flag,#[bold]+,}"

set -g window-status-bell-style fg=colour255,bg=colour1,bold

# The messages
set -g message-command-style fg=magenta,bg=default
set -g message-style fg="magenta",bg="default",bold

# globals
bind -n C-M-S-j last-pane
bind -n C-M-S-k last-window
bind -n C-M-S-l switch-client -l # last session
bind -n C-M-S-f run-shell 'nu -c "use ct/tmux; tmux sessionizer"'

#: }}}
#: FINGERS {{{

# TODO: enhance actions to open on selection
# @fingers-alt-action

# set -g @plugin 'fcsonline/tmux-thumbs' # rust alternative to fingers, if slow
set -g @plugin 'Morantron/tmux-fingers'

set -g @fingers-show-copied-notification 0    # causes delay
set -g @fingers-skip-wizard 1
set -g @fingers-highlight-style "fg=yellow"   # color of selected text
set -g @fingers-hint-style "fg=red,bold"      # color of hints
set -g @fingers-backdrop-style "fg=white,dim" # color of everything else
set -g @fingers-hint-position "right"

# add patterns: https://github.com/Morantron/tmux-fingers#fingers-patterns-n
# builtins: https://github.com/Morantron/tmux-fingers/blob/master/src/fingers/config.cr

# add vimgrep patterns
set -g @fingers-pattern-0 "(([.\\w\\-~\\$@]+)?(/[.\\w\\-@]+)+/?(:\\d+)?(:\\d+)?)"

# if not in vim, finger the current pane
bind s if-shell "$is_vim" {
	run -b 'nu -c "use ct/tmux; tmux finger-other-pane"'
} {
	run -b "#{@fingers-cli} start #{pane_id}"
}

#: }}}
#: PLUGINS {{{

# C-s to save C-r to reload
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @resurrect-strategy-nvim 'session'

# automatically saves and loads resurrect sesisons
# needs to come last to use the status-right variable
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-boot 'on' # start up tmux on boot
# set -g @continuum-boot-options 'kitty'
# set -g @continuum-restore 'on' # reload last session
# set -g @continuum-save-interval '15'

# set -g @plugin 'wfxr/tmux-fzf-url' # prefix + u to fzf urls

set -g @plugin 'tmux-plugins/tmux-yank'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
if "test ! -d ~/.config/tmux/plugins/tpm" \
	"run 'git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm && ~/.config/tmux/plugins/tpm/bin/install_plugins'"
run '~/.config/tmux/plugins/tpm/tpm'

