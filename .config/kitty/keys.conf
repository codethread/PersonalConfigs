# vim:fileencoding=utf-8:foldmethod=marker:foldlevel=0

#: setup {{{

# default, keeping here as reference
kitty_mod ctrl+shift
map cmd+enter toggle_fullscreen
map ctrl+tab no_op
map ctrl+shift+tab no_op

# enter prefix mode with C-a (like tmux)
map --new-mode tmux --on-action end ctrl+a
# exit prefix mode (unlike tmux, any unmapped key exits)
map --mode tmux escape pop_keyboard_mode

#: }}}
#: debug {{{

# https://sw.kovidgoyal.net/kitty/actions/#debugging
# kitten @ --help
# kitty --debug-input
# kitty kitten show-key
# kitty kitten show-key -m kitty
map f1 show_kitty_env_vars

map --mode tmux shift+/ debug_config

#: }}}
#: tabs {{{

map --mode tmux n new_tab_with_cwd !neighbor
map --mode tmux x close_window
map --mode tmux tab goto_tab -1
map --mode tmux shift+o close_other_tabs_in_os_window

# window management
map --mode tmux shift+tab previous_tab
map --mode tmux backspace close_tab
# tmux: prefix + o (kill all other windows) - using 'O' to avoid conflict with prompt navigation
map --mode tmux o close_other_windows_in_tab
# map --mode tmux shift+o action close-tab --match "not state:focused and state:parent_focused"
# map --mode tmux shift+o launch --type=background kitty @ close-tab --match "not state:focused and state:parent_focused"

#: }}}
#: layout {{{

# tmux: prefix + | (split horizontal)
map --mode tmux bar launch --location=hsplit --cwd=current
# tmux: prefix + - (split vertical)
map --mode tmux minus launch --location=vsplit --cwd=current
# tmux: prefix + Space (zoom/layout toggle)
map --mode tmux space toggle_layout stack
# tmux: prefix + = (main-vertical layout)
## TODO: play with this to fix layouts back, might not be needed with other layout specifics
map --mode tmux equal move_window_to_top
# map --mode tmux equal next_layout

# layout management
# tmux: prefix + m (tmux-layout)
map --mode tmux m launch --type=overlay --title="Layout" sh -c "${DOTFILES}/.local/bin/tmux-layout"
map --mode tmux enter layout_action bias 50 62 70
# map ctrl+, layout_action bias 62

#: }}}
#: windows {{{

# rotations
map --mode tmux } move_window_forward
map --mode tmux { move_window_backward

# window resizing (tmux: prefix + H/J/K/L)
map kitty_mod+h resize_window wider 5
map kitty_mod+l resize_window narrower 2
map kitty_mod+j resize_window shorter 2
map kitty_mod+k resize_window taller 2

# Navigation between kitty windows (vim-style)
map ctrl+j neighboring_window down
map ctrl+k neighboring_window up
map ctrl+h neighboring_window left
map ctrl+l neighboring_window right

# Unset the mapping to pass the keys to neovim when focused on nvim
map --when-focus-on var:IS_NVIM ctrl+j
map --when-focus-on var:IS_NVIM ctrl+k
map --when-focus-on var:IS_NVIM ctrl+h
map --when-focus-on var:IS_NVIM ctrl+l

# Window resizing (vim-style with alt modifier)
# the 3 here is the resize amount, adjust as needed
map alt+j kitten relative_resize.py down  3
map alt+k kitten relative_resize.py up    3
map alt+h kitten relative_resize.py left  3
map alt+l kitten relative_resize.py right 3

# Unset alt mappings when focused on nvim
map --when-focus-on var:IS_NVIM alt+j
map --when-focus-on var:IS_NVIM alt+k
map --when-focus-on var:IS_NVIM alt+h
map --when-focus-on var:IS_NVIM alt+l

# pane management
# tmux: prefix + j (pane swap with fzf) - simplified window swapping
# map --mode tmux shift+j launch --type=overlay --title="Swap Window" sh -c 'echo "Window swapping requires custom implementation"'
# tmux: prefix + b (break pane) - move window to new tab (requires custom implementation)
# map --mode tmux b launch --type=background sh -c 'echo "Break pane not directly supported in kitty"'

# pane history navigation (limited kitty equivalent)
# tmux: prefix + i (next prompt)
map alt+] scroll_to_prompt 1
map --when-focus-on var:IS_NVIM alt+]
# tmux: prefix + o (previous prompt) - moved here to avoid conflict with close_other_windows
map alt+[ scroll_to_prompt -1
map --when-focus-on var:IS_NVIM alt+[

#: }}}
#: history {{{

# kitty-scrollback.nvim Kitten alias
action_alias kitty_scrollback_nvim kitten ~/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py

# Browse scrollback buffer in nvim (kind of slow)
map --mode tmux [ kitty_scrollback_nvim
map --mode tmux shift+h show_scrollback
# Browse output of the last shell command in nvim
map --mode tmux ] kitty_scrollback_nvim --config ksb_builtin_last_cmd_output
#: }}}
#: session {{{

action_alias ksm_bg launch --type=background ksm

# tmux: prefix + s (list sessions)
map --mode tmux shift+s launch --title="Sessions" --copy-env ksm list
# tmux: prefix + S (interactive session switcher with fzf)
map --mode tmux f launch --type=overlay --title="Switch Session" ksm select
# tmux: prefix + W (work context interactive switcher)
map --mode tmux shift+w launch --type=overlay --title="Work Sessions" select --work
# tmux: prefix + C (show config-based projects)
map --mode tmux shift+c launch --type=window --title="Config Projects" ksm config-projects
# tmux: prefix + r (rename session) - simplified without interactive input
map --mode tmux shift+r set_tab_title
# tmux: prefix + p (project switch)
map --mode tmux p launch --type=overlay --title="Switch Project" nu -c "use ct/tmux; tmux switch"
# tmux: prefix + w (work-start-work)
map --mode tmux w launch --type=background nu -l -c "work-start-work"

# keyed project switches (P0-P9) - personal context
map --mode tmux 0 ksm_bg key P0
map --mode tmux 1 ksm_bg key P1
map --mode tmux 2 ksm_bg key P2
map --mode tmux 3 ksm_bg key P3
map --mode tmux 4 ksm_bg key P4
map --mode tmux 5 ksm_bg key P5
map --mode tmux 6 ksm_bg key P6
map --mode tmux 7 ksm_bg key P7
map --mode tmux 8 ksm_bg key P8
map --mode tmux 9 ksm_bg key P9

#: }}}
#: system {{{

# send C-a to application if pressed twice (like tmux C-b C-b)
map --mode tmux ctrl+a send_text all \x1

# reload configuration
map --mode tmux r combine : load_config_file : kitten notify --expire-after 2s Configuration reloaded! : pop_keyboard_mode

#: }}}
#: mouse {{{

# Show clicked command output in nvim
mouse_map ctrl+shift+right press ungrabbed mouse_select_command_output

#: }}}
#: scratch / WIP {{{

map --mode tmux q select_tab
k
# tmux: prefix + ; (tmux-fzf launch)
map --mode tmux semicolon launch --type=overlay --title="FZF" tmux-fzf

# history and buffer
# tmux: prefix + S (save history) - use different key to avoid conflict
map --mode tmux ctrl+s launch --type=overlay --title="Save History" sh -c 'kitty @ get-text --match=active > "/tmp/kitty-history-$(date +%s).txt" && echo "History saved to /tmp/kitty-history-$(date +%s).txt"'
# tmux: prefix + O (tmux buffer)
# map --mode tmux shift+o launch --type=overlay --title="Buffer" tmuxBuffer

# keep mac emoji picker -- can't be done https://github.com/kovidgoyal/kitty/issues/1507
# map cmd+ctrl+space kitten unicode_input --emoji-variation graphic

#: }}}
